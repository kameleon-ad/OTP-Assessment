using System;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Threading.Tasks;

/*
    Assumptions:

- The email server used in this module is Office365.
- The SMTP port used in this module is 587.
- The OTP code generated by this module is a 6-digit number.
- The OTP code is case-insensitive.
- The input stream provided to CheckOTP() method contains a single line of text with the OTP code.
- The input stream provided to CheckOTP() method is not closed by the method.
- The OTP code is considered invalid if it does not match the OTP code generated by the module.
- The OTP code is considered expired if the CheckOTP() method is called after the OTPExpiration time.
- The CheckOTP() method will wait for a maximum of nb_tries * expireMinutes * 60 seconds to receive the OTP code from the input stream. If the OTP code is not received within this time, the method will return a STATUS_OTP_TIMEOUT status. If the OTP code is received within this time, but is invalid, the method will continue waiting for nb_tries - 1 more times, or until the OTP code is valid, or until the OTP code is expired.

    Solution:

- The module provides an Email_OPT_Module class with the following public methods:
  * Email_OPT_Module(string emailAddr, string emailPswd): constructor that takes in the email address and password of the email account that will be used to send OTP codes.
  * void Start(): Initialize some private fields and create instances of SmtpClient and MailMessage.
  * void Close(): method that does nothing.
  * EmailStatus GenerateOPTEmail(string userEmail): method that takes in the email address of the user that will receive the OTP code, generates a 6-digit OTP code, sends an email containing the OTP code to the user's email address, and returns a status indicating whether the email was sent successfully, the email address is invalid, or an error occurred.
  * async Task<OTPStatus> CheckOTP(Stream input): method that takes in a stream containing the OTP code entered by the user, waits for the OTP code to be entered, and returns a status indicating whether the OTP code was entered correctly, incorrectly, or after the OTPExpiration time.
- The module assumes that the email server used is Office365, and the SMTP port used is 587.
- The module assumes that the OTP code generated is a 6-digit number, and is case-insensitive.
- The module assumes that the input stream provided to CheckOTP() method contains a single line of text with the OTP code, and is not closed by the method.
- The module assumes that the OTP code is considered invalid if it does not match the OTP code generated by the module.
- The module assumes that the OTP code is considered expired if the CheckOTP() method is called after the OTPExpiration time.
- The module assumes that the CheckOTP() method will wait for a maximum of nb_tries * expireMinutes * 60 seconds to receive the OTP code from the input stream. If the OTP code is not received within this time, the method will return a STATUS_OTP_TIMEOUT status. If the OTP code is received within this time, but is invalid, the method will continue waiting for nb_tries - 1 more times, or until the OTP code is valid, or until the OTP code is expired.
 */

namespace OTP_Assessment
{
    public class Email_OPT_Module
    {
        private string OTP;
        private string dstEmail;
        private DateTime OTPExpiration;

        private int expireMinutes;
        private int nb_tries;
        private Random random;
        private SmtpClient smtpClient;
        private MailMessage mailMessage;

        private readonly string srcEmailAddr;
        private readonly string srcEmailPswd;

        public Email_OPT_Module(string emailAddr, string emailPswd)
        {
            srcEmailAddr = emailAddr;
            srcEmailPswd = emailPswd;
        }

        public void Start()
        {
            expireMinutes = 1;
            nb_tries = 10;
            random = new Random();

            smtpClient = new SmtpClient("smtp.office365.com", 587)
            {
                Credentials = new NetworkCredential(srcEmailAddr, srcEmailPswd),
                EnableSsl = true,
                DeliveryMethod = SmtpDeliveryMethod.Network
            };

            mailMessage = new MailMessage
            {
                From = new MailAddress(srcEmailAddr),
                Subject = "Your OTP Code",
            };
        }

        public void Close() { }

        public string getOTP()
        {
            return OTP;
        }

        public enum EmailStatus
        {
            STATUS_EMAIL_OK,
            STATUS_EMAIL_FAIL,
            STATUS_EMAIL_INVALID
        }

        public EmailStatus GenerateOPTEmail(string userEmail)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(userEmail);
                if (addr.Host == "dso.org.sg")
                {
                    return EmailStatus.STATUS_EMAIL_INVALID;
                }
            }
            catch
            {
                return EmailStatus.STATUS_EMAIL_INVALID;
            }

            OTP = random.Next(100000, 999999).ToString();
            OTPExpiration = DateTime.Now.AddMinutes(expireMinutes);

            try
            {
                mailMessage.To.Clear();
                mailMessage.Body = $"Your OTP Code is {OTP}. The code is valid for 1 minute.";
                mailMessage.To.Add(new MailAddress(userEmail));

                smtpClient.Send(mailMessage);
                dstEmail = userEmail;

                return EmailStatus.STATUS_EMAIL_OK;
            }
            catch
            {
                return EmailStatus.STATUS_EMAIL_FAIL;
            }
        }

        public enum OTPStatus
        {
            STATUS_OTP_OK,
            STATUS_OTP_FAIL,
            STATUS_OTP_TIMEOUT
        }

        public async Task<OTPStatus> CheckOTP(Stream input)
        {
            StreamReader streamReader = new StreamReader(input);
            byte[] buffer = new byte[1024];

            Task<string> readTask = Task.Run(() => {
                return streamReader.ReadLine().Trim();
            });

            int delay;

            for (int epoch = 0; epoch < nb_tries; epoch++)
            {
                if (OTPExpiration <= DateTime.Now)
                {
                    return OTPStatus.STATUS_OTP_TIMEOUT;
                }
                delay = (int)(OTPExpiration - DateTime.Now).TotalMilliseconds;
                if (await Task.WhenAny(readTask, Task.Delay(delay)) == readTask)
                {
                    string inputCode = readTask.Result;
                    if (OTP.Equals(inputCode))
                    {
                        Console.WriteLine($"Verified OTP at { dstEmail }");
                        return OTPStatus.STATUS_OTP_OK;
                    }
                    else
                    {
                        Console.WriteLine($"Invalid OTP at { dstEmail }");
                        continue;
                    }
                }
                else
                {
                    Console.WriteLine($"OTP is expired at { dstEmail }");
                    return OTPStatus.STATUS_OTP_TIMEOUT;
                }
            }
            Console.WriteLine($"Too many failed attempts at { dstEmail }.");
            return OTPStatus.STATUS_OTP_FAIL;
        }
    }


    class Program
    {
        static void Main(string[] args)
        {
            var otp = new Email_OPT_Module(args[0], args[1]);
            otp.Start();

            if (otp.GenerateOPTEmail("eujinpotter@outlook.com") != Email_OPT_Module.EmailStatus.STATUS_EMAIL_OK)
            {
                Console.WriteLine("Fail");
                return;
            }
            Console.WriteLine("[INFO] Sent Email");
            Stream inputStream = Console.OpenStandardInput();
            otp.CheckOTP(inputStream).Wait();
        }
    }
}
